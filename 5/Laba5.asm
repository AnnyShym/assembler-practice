; Laba 5.16


use16	       ; генерировать 16-битный код
org 100h       ; программа начинается с адреса 100h



  ; Ввести 8-битовое целое число A. Если оно четное, вычислить значение выражения A^3 - 1. 
  ; Если нечетное - значение выражения A^2.



	jmp start      ; переход на метку start


;=============================== данные ===============================


	number	   =	2
						 
	data_numb  db	'Number = $';
					    
	result1    db	13, 10, 13, 10, 'Registers: $'
	result2    db	13, 10, 'Global variables: $';
	result3    db	13, 10, 'Stack: $'


;================================ тело ================================


	start:

		mov dx, data_numb
		mov ah, 09h	      ; вывод шаблона для числа
		int 21h
			   
		mov al, number
		call output	      ; вывод числа

;----------------------- параметры через регистры ---------------------

		mov dx, result1
		mov ah, 09h	      ; вывод шаблона для 1 результата
		int 21h

		xor ax, ax	      ; обнуляем регистры
		xor bx, bx

		mov al, number	      ; загружаем параметры в регистры
		mov bl, number

		call proc_reg	      ; вызываем процедуру

;--------------------- параметры через общую память -------------------

		mov dx, result2
		mov ah, 09h	      ; вывод шаблона для 2 результата
		int 21h

		call proc_glob	      ; вызываем процедуру

;------------------------- параметры через стек -----------------------

		mov dx, result3
		mov ah, 09h	      ; вывод шаблона для 3 результата
		int 21h

		push number	      ; помещаем в стек значение переменной

		call proc_stack       ; вызываем процедуру

;------------------------- завершение программы -----------------------

		mov ah, 08h	     ; ожидаем нажатия клавиши
		int 21h

		mov ax, 4C00h	     ; завершение программы
		int 21h


;======================= параметры через регистры =====================


	proc_reg:

		test al, 00000001b	   ; определяем младший бит числа


		jz r_even_numb		   ; если равен 0, то число четное

			mul bl		   ; если нечетное, A^2

			jmp r_continue


		r_even_numb:		   ; если четное

			mul bl
			mul bl		   ; A^3 - 1
			dec ax


		r_continue:

			call output	   ; вывод результата

		ret			   ; возврат из процедуры


;===================== параметры через общую память ===================


	proc_glob:

		xor ax, ax		   ; обнуляем регистры
		xor bx, bx

		mov bl, number		   ; используем глобальную переменную
		mov al, number

		test al, 00000001b	   ; определяем младший бит числа


		jz gl_even_numb 	   ; если равен 0, то число четное

			mul bl		   ; если нечетное, A^2

			jmp gl_continue


		gl_even_numb:		   ; если четное

			mul bl
			mul bl		   ; A^3 - 1
			dec ax


		gl_continue:

			call output	   ; вывод результата

		ret			   ; возврат из процедуры


;========================= параметры через стек =======================


	proc_stack:

		push bp 		   ; помещаем наш указатель в стек
		mov bp, sp		   ; задаем адрес вершины стека

		mov bx, [bp + 4]	   ; = number
		mov ax, [bp + 4]	   ; = number

		test al, 00000001b	   ; определяем младший бит числа


		jz st_even_numb 	   ; если равен 0, то число четное

			mul bl		   ; если нечетное, A^2

			jmp st_continue


		st_even_numb:		   ; если четное

			mul bl
			mul bl		   ; A^3 - 1
			dec ax


		st_continue:

			call output	   ; вывод результата


		pop bp			   ; восстанавливаем bp


		ret			   ; возврат из процедуры


;===================== процедура для вывода данных ====================


	output:

		mov dx, ax
		add dx, '0'	  ; преобразовываем результат в символ

		mov ah, 02h	  ; выводим символ на экран
		int 21h
							      
		ret		  ; возврат из процедуры

